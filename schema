local typedefs = require "kong.db.schema.typedefs"


local PLUGIN_NAME = "Plugin-SAMLValidate"


local schema = {
  name = PLUGIN_NAME,
  fields = {
    -- the 'fields' array is the top-level entry with fields defined by Kong
    { consumer = typedefs.no_consumer },  -- this plugin cannot be configured on a consumer (typical for auth plugins)
    { protocols = typedefs.protocols_http },
    { config = {
        -- The 'config' record is the custom part of the plugin schema
        type = "record",
        fields = {
          -- a standard defined field (typedef), with some customizations
          { request_header = typedefs.header_name {
              required = true,
              default = "Hello-World" } },
          { response_header = typedefs.header_name {
              required = true,
              default = "Bye-World" } },
          { ttl = { -- self defined field
              type = "integer",
              default = 600,
              required = true,
              gt = 0, }}, -- adding a constraint for the value
          { ldap_server = {
            type = "string",
            default = "ldap://localhost",
            required = true, } },
          { ldap_port = {
            type = "number",
            default = 389,
            required = true, }},
          
        },
        entity_checks = {
          -- add some validation rules across fields
          -- the following is silly because it is always true, since they are both required
          { at_least_one_of = { "request_header", "response_header" }, },
          -- We specify that both header-names cannot be the same
          { distinct = { "request_header", "response_header"} },
          --newcode
          
        --   { custom = {
        --     func = function(config)
        --         if not config.ldap_server then
        --             return true
        --         end
        --         local valid, err = ngx.re.match(config.ldap_server, "^[a-zA-Z0-9.-]+$")
        --         if not valid then
        --             return false, "LDAP server must be a valid hostname or IP address."
        --         end
        --         return true
        --     end,
        -- } },
        -- { custom = {
        --     func = function(config)
        --         if not config.ldap_port then
        --             return true
        --         end
        --         if config.ldap_port < 1 or config.ldap_port > 65535 then
        --             return false, "LDAP port must be within the range 1-65535."
        --         end
        --         return true
        --       end,
        -- } },
        --------------
        },
      },
    },
  },
}

return schema
